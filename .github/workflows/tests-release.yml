name: Tests for Release

on:
  push:
    branches:
      - release-* # all release-<version> branches
  pull_request:
    types: [review_requested, ready_for_review] # only non-draft PR
    branches:
      - release-* # all release-<version> branches


jobs:
  # STEP 1 - NPM Audit

  # Before we even test a thing we want to have a clean audit! Since this is
  # sufficient to be done using the lowest node version, we can easily use
  # a fixed one:

  audit:
    name: NPM Audit
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Setup node 12
      uses: actions/setup-node@v1
      with:
        node-version: 12
    - run: npm audit --production # no audit for dev dependencies

  # STEP 2 - basic unit tests

  # This is the standard unit tests as we do in the basic tests for every PR
  unittest:
    name: Basic unit tests
    runs-on: ubuntu-latest
    needs: [audit]
    strategy:
      matrix:
        node: [12, 14, 16]
    steps:
    - name: Checkout ${{ matrix.node }}
      uses: actions/checkout@v2

    - name: Setup node ${{ matrix.node }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node }}

    - name: Cache dependencies ${{ matrix.node }}
      uses: actions/cache@v1
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ matrix.node }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-${{ matrix.node }}

    # for this workflow we also require npm audit to pass
    - run: npm ci
    - run: npm run test:coverage

    # with the following action we enforce PRs to have a high coverage
    # and ensure, changes are tested well enough so that coverage won't fail
    - name: check coverage
      uses: devmasx/coverage-check-action@v1.2.0
      with:
        type: lcov
        result_path: coverage/lcov.info
        min_coverage: 95
        token: ${{github.token}}

  # STEP 3 - Integration tests

  # Since our release may affect several packages that depend on it we need to
  # cover the closest ones, like adapters and examples.

  integrationtests:
    name: Extended integration tests
    runs-on: ubuntu-latest
    needs: [unittest]
    strategy:
      matrix:
        node: [12, 14, 16]
    steps:
    # checkout this repo
    - name: Checkout ${{ matrix.node }}
      uses: actions/checkout@v2

    # checkout express-adapter repo
    - name: Checkout express-adapter ${{ matrix.node }}
      uses: actions/checkout@v2
      with:
        repository: node-oauth/express-adapter
        path: github/testing

    # place checkout for other adapters here
    - name: Setup node ${{ matrix.node }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node }}

    - name: Cache dependencies ${{ matrix.node }}
      uses: actions/cache@v1
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ matrix.node }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-${{ matrix.node }}

    # in order to test the adapter we need to use the current state
    # we just cloned and install it as local dependency
    - run: cd github/testing/express-adapter && npm ci
    - run: cd github/testing/express-adapter && npm install ./
    - run: cd github/testing/express-adapter && npm run tests

    # todo repeat with other adapters

  npmpubdry:
    name: NPM Publish Dry-run
    runs-on: ubuntu-latest
    needs: [integrationtests]
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Setup node 12
      uses: actions/setup-node@v1
        with:
          node-version: '12.x'
          registry-url: 'https://registry.npmjs.org'
      - run: npm install
      - run: npm publish --dry-run
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  ghpubdry:
    needs: [integrationtests]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          # we always publish targeting the lowest supported node version
          node-version: 12
          registry-url: $registry-url(npm)
      - run: npm ci
      - run: npm publish --dry-run
        env:
          NODE_AUTH_TOKEN: ${{secrets.GITHUB_TOKEN}}